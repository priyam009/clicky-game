{"version":3,"sources":["components/Navbar.js","components/Header.js","components/Wrapper.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","instructions","classname","className","href","score","topScore","Header","Wrapper","children","Game","onClick","handleClick","id","alt","name","src","image","App","state","characters","resetCharacters","forEach","character","clicked","shuffle","temp","index","current","length","Math","floor","random","newCharacters","filter","setState","console","log","this","class","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eae51618.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nfunction Navbar(props) {\n  if(props.instructions===\"You guessed correctly!\") {\n    var classname = \"nav-instruction correct\"\n  } else if (props.instructions===\"You guessed incorrectly!\") {\n    var classname = \"nav-instruction incorrect\"\n  } else {\n    var classname = \"nav-instruction\"\n  }\n\n  return (\n    <nav className=\"navbar navbar-light d-flex flex-row justify-content-between nav-content\">\n      <div className=\"d-flex\">\n        <a href=\"/\" className=\"navbar-brand\">\n          Clicky Game!\n        </a>\n      </div>\n      <div className={classname}>{props.instructions}</div>\n      <ul className=\"navbar-nav d-flex flex-row\">\n        <li className=\"nav-item p-3\">Score: {props.score}</li>\n        <li className=\"nav-item p-3\">Top Score: {props.topScore}</li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"../App.css\";\n\nfunction Header() {\n  return (\n    <div className=\"card header-content text-center\">\n      <div className=\"card-body d-flex flex-column align-item-center\">\n        <h1 className=\"card-title\">Clicky Game!</h1>\n        <p className=\"card-text header-para\">\n          Click on the image to earn points, but don't click on any more than\n          once!\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"../App.css\";\n\nfunction Wrapper(props) {\n  return(\n    <div className=\"container wrapper\">{props.children}</div>\n  );\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"../App.css\";\n\nfunction Game(props) {\n  return (\n    //On click button handler\n    <button className=\"game-button\" onClick={() => props.handleClick(props.id)}>\n      <div className=\"card character-card\">\n        <div className=\"img-container\">\n          <img alt={props.name} src={props.image} />\n        </div>\n      </div>\n    </button>\n  );\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport Game from \"./components/Game\";\nimport characters from \"./characters.json\";\n\nclass App extends React.Component {\n  //Set initial state\n  state = {\n    score: 0,\n    topScore: 0,\n    characters: characters,\n    instructions: \"\"\n  };\n\n  componentDidMount() {\n    this.setState({\n      instructions: \"Click on the image to begin!\"\n    });\n  }\n\n  //Reset all character to \"clicked = false\"\n  resetCharacters = () => {\n    this.state.characters.forEach(character => (character.clicked = false));\n  };\n\n  //Shuffle characters after every on click\n  shuffle = character => {\n    let current = character.length;\n    let temp;\n    let index;\n\n    // While there are elements in the array\n    while (current > 0) {\n      // Pick a random index\n      index = Math.floor(Math.random() * current);\n      // Decrease current by 1\n      current--;\n      // And swap the last element with it\n      temp = character[current];\n      character[current] = character[index];\n      character[index] = temp;\n    }\n    return character;\n  };\n\n  //Handle click on characters- update score\n  handleClick = id => {\n    //Loop through all characters and save in newCharacter variable- update characters and score\n    const newCharacters = this.state.characters.filter(character => {\n      if (character.id === id && !character.clicked) {\n        character.clicked = true;\n        this.setState({\n          score: this.state.score + 1,\n          instructions: \"You guessed correctly!\"\n        });\n        console.log(\"this.state.score\", this.state.score);\n      } else if (character.id === id && character.clicked) {\n        this.resetCharacters();\n        this.setState({\n          score: 0,\n          instructions: \"You guessed incorrectly!\"\n        });\n      }\n      return character;\n    });\n\n    this.shuffle(newCharacters);\n    this.setState({\n      characters: newCharacters\n    });\n  };\n\n  //If component updated\n  componentDidUpdate() {\n    //When component score updates- update topScore if true\n    if (this.state.score > this.state.topScore) {\n      this.setState({\n        topScore: this.state.score\n      });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          instructions={this.state.instructions}\n          class={this.state.class}\n        />\n        <div className=\"div-content\">\n          <Header />\n          <Wrapper>\n            {this.state.characters.map(character => (\n              <Game\n                key={character.id}\n                id={character.id}\n                name={character.name}\n                image={character.image}\n                handleClick={this.handleClick}\n              />\n            ))}\n          </Wrapper>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}